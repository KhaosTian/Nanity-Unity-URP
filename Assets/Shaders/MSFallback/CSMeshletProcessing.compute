#pragma kernel ProcessingMain

#include "MeshletCommon.hlsl"


StructuredBuffer<uint> _VisibleMeshletIndicesBuffer;
StructuredBuffer<uint> _DrawArgsBuffer;
StructuredBuffer<Meshlet> _MeshletsBuffer;
StructuredBuffer<uint> _MeshletPrimitiveIndicesBuffer;
StructuredBuffer<uint> _MeshletVertexIndicesBuffer;

RWStructuredBuffer<uint> _IndicesBuffer;

uint3 UnpackPrimitive(uint primitive)
{
    return uint3((primitive >> 0) & 0xFF, (primitive >> 8) & 0xFF, (primitive >> 16) & 0xFF);
}

uint3 GetPrimitive(Meshlet m, uint index)
{
    return UnpackPrimitive(_MeshletPrimitiveIndicesBuffer[m.PrimOffset + index]);
}

[numthreads(MS_GROUP_SIZE, 1, 1)]
void ProcessingMain(uint3 groupThreadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    // 每个线程组处理一个 meshlet
    uint visibleMeshletIndex = groupId.x;
    uint localThreadId = groupThreadId.x;

    // 检查是否超出可见 meshlet 范围
    uint visibleCount = _DrawArgsBuffer[1];

    if (visibleMeshletIndex >= visibleCount) return;

    // 获取实际的 meshlet 索引和 meshlet 数据
    uint globalMeshletIndex = _VisibleMeshletIndicesBuffer[visibleMeshletIndex];
    Meshlet m = _MeshletsBuffer[globalMeshletIndex];


    // 组内线程数不超过最大图元数限制以及当前 Meshlet 包含的图元数量
    if (localThreadId >= m.PrimCount || localThreadId >= MAX_PRIMS) return;

    // 获取局部三角形索引
    uint3 localTri = GetPrimitive(m, localThreadId);

    // 合并所有可见 meshlet 的索引
    uint baseAddr = 3 * (MAX_PRIMS * visibleMeshletIndex + localThreadId);
    uint baseVtx0 = _MeshletVertexIndicesBuffer[m.VertOffset + localTri.x];
    uint baseVtx1 = _MeshletVertexIndicesBuffer[m.VertOffset + localTri.y];
    uint baseVtx2 = _MeshletVertexIndicesBuffer[m.VertOffset + localTri.z];

    // 写入全局三角形索引缓冲区
    _IndicesBuffer[baseAddr + 0] = baseVtx0;
    _IndicesBuffer[baseAddr + 1] = baseVtx1;
    _IndicesBuffer[baseAddr + 2] = baseVtx2;
}
